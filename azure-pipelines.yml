# azure-pipelines.yml for frontend.

trigger:
  branches:
    include:
    - main # Or your default branch
  
resources:
- repo: self

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Azure Container Registry connection details
  # IMPORTANT: Replace 'YourACRServiceConnectionName' with the actual name of your ACR Service Connection in Azure DevOps
  dockerRegistryServiceConnection: 'ACR-ingesoft5acrregistry-Connection' # Updated Service Connection Name
  acrLoginServer: 'testacrgyvpcp.azurecr.io' # Updated ACR Login Server
  imageRepository: 'users-api' # Name for the image in ACR
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  buildContextPath: '$(Build.SourcesDirectory)'
  tag: '$(Build.BuildId)'
  
  # Container App
  containerAppName: 'test-users-api-ca' # Nombre exacto de tu Container App
  resourceGroupName: 'rg-app-testing'  # RG donde está la Container App
  azureResourceManagerConnection: 'AzureRM-microservice' # Connection a tu suscripción de Azure

stages:
- stage: Build
  displayName: Build and Push stage
  jobs:
  - job: Build
    displayName: Build and Push Users API
    pool:
      vmImage: $(vmImageName)
    steps:
    # Login to ACR
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    # Build the image
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        repository: $(imageRepository) # Build locally first
        dockerfile: $(dockerfilePath)
        buildContext: $(buildContextPath)
        tags: |
          $(tag)
          latest

    # Push the image
    - task: Docker@2
      displayName: Push image
      inputs:
        command: push
        repository: $(imageRepository) # Use the local image name built previously
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    
    # Deploy a Container App
    - task: AzureCLI@2
      displayName: Deploy to Azure Container App
      inputs:
        azureSubscription: $(azureResourceManagerConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Desplegando nueva imagen a Container App...."
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroupName) \
            --image $(acrLoginServer)/$(imageRepository):$(tag) 
